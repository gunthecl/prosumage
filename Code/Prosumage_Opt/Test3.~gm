********************************************************************************
********************************************************************************
*   This model is a dispatch and investment model for PROSUMAGE households
*   PROSUMAGE households PROduce, conSUMe electricity and usage storAGE
*
*   Date of this version: August 6, 2018
*
********************************************************************************
********************************************************************************


******************* Format and model run specifications ************************

* ------------- household selection---------------------------------------------
* Select a household profile between V1 and V74:

$setglobal household_profile "V17"


* ------------- Base year selection---------------------------------------------
* Select year between 2010 and 2016:

$setglobal base_year "2014"



* ------------- Set data import and export options -----------------------------

* mark offXcel with a star to turn off excel import and import gdx file
* mark modelkill to create a gdx file only without model run

$setglobal offXcel "*"
$setglobal modelkill ""

* Set column index (alphabetic) in excel file furthest to the right
* to speed up data import

$setglobal colindex "H"

* Name input file suffix other than "input data"
$setglobal modelrun ""

* Auto set of input file (do not change)
$setglobal uploadfile "data\%modelrun%input_data"

* Auto set of output file (do not change)
$setglobal outputfile "results\%modelrun%_results"


**************** Sets, variables, parameters declaration ***********************


Sets
h                Hours                                   /h1*h8760/
res              Renewable technologies                  /solar/
*sto              Storage technolgies                     /storage/
year             Base years                              /2010*2016/
hh_profile       Household load data                     /V1*V74/

;

Variables
mu(h)
lambda(h)
gamma

Positive variables
G_PV(h)              Generation of pv plant
*CU(h)                Curtailment of pv energy
N_PV                PV generation capacities
*N_STO_E(sto)             Capacities: storage energy
*N_STO_P(sto)             Capacities: storage power
*STO_L(sto,h)             Storage level
*STO_IN(sto,h)            Storage intake
*STO_OUT(sto,h)           Storage generation
E_buy(h)                 Energy purchased from market
E_sell(h)                Energy sold to market


;

Parameters
*sto_ini_last(sto)           Level of storage in initial and last period
*eta_sto_in(sto)             Efficiency: storage in
*eta_sto_out(sto)            Efficiency: storage out
d(h)                        Household load
d_upload(h,hh_profile)      Household load - upload parameter
avail_solar(h)              Hourly capacity factor for pv
avail_solar_upload(h,year)  Hourly capacity factor pv - upload parameter
pv_cap_max             PV capacity maximum
price_market(h)             Price for selling energy per kWh
price_market_upload(h,year) Price for selling energy per MWh - upload parameter
price_buy(h)                   Price for energy consumption per kWh
*c_i_sto_e(sto)              Cost: investment into storage energy
*c_i_sto_p(sto)              Cost: investment into storage power
c_i_pv                      Cost: investment into renewable capacity
*c_var_sto(sto)              Cost: variable generation costs storage
penalty                     Penalty term
lev_Z                         level of objective
lev_EB                        total bought power
lev_ES                        total sold power
check

;


* Declare efficiency parameters
*sto_ini_last(sto)  =  0.5 ;
*eta_sto_in(sto)    =  0.81 ;
*eta_sto_out(sto)   =  0.926 ;
penalty = 0 ;


* Declare cost parameters
*c_i_sto_e(sto)  =  5418.14/1000 ;
*c_i_sto_p(sto)  = 50995.48/1000 ;
c_i_pv           = 60526.64/1000 ;
*c_var_sto(sto)  =     0.5/1000 ;
price_buy(h)        =    0.30 ;

* Declare further restrictions
pv_cap_max =  10;


***************************** Upload data **************************************

$onecho >%uploadfile%.tmp

par=d_upload             rng=demand!a3:bw8764             rdim=1 cdim=1
par=avail_solar_upload   rng=solar!a3:%colindex%8764      rdim=1 cdim=1
par=price_market_upload  rng=price!a3:%colindex%8764      rdim=1 cdim=1

$offecho


%offXcel%$call "gdxxrw %uploadfile%.xlsx squeeze=N @%uploadfile%.tmp  o=%uploadfile%.gdx  ";
$GDXin %uploadfile%.gdx
$load d_upload avail_solar_upload price_market_upload
;

* Load data for specific household and base year
d(h)                   = d_upload(h,'%household_profile%') ;
avail_solar(h)         = avail_solar_upload(h,'%base_year%') ;

*Load market price as price per kWh
price_market(h)        = price_market_upload(h,'%base_year%')/1000 ;
*price_market(h)        = 0.12 ;

$if "%modelkill%" == "*"  $abort Check GDX upload

****************************** Model setup *************************************

Equations
objective                  Objective function
hh_energy_balance          Household energy balance
pv_generation              Household use of pv energy generation
pv_install_max             PV capacity constraint
energy_tomarket            Amount of energy sold to market
energy_frommarket          Amount of energy purchased from market
KKTN
KKTG
KKTEB
KKTES
*stolev_no_freelunch        Storage level in initial and last period
*stolevel                   Storage level dynamics
*stolev_max_energy          Storage capacity constraint on maximum energy
*stoin_max_power            Storage capacity constraint on maximum power - storing in
*stoout_max_power           Storage capacity constraint on maximum power - storing out
*foresight_24h              Perfect foresight only for next 24h
;

*** Household energy balance: Satisfy load with own generation, storage and grid
hh_energy_balance(h)..


            G_PV(h) + E_buy(h)  =E= d(h)
*         + sum( sto , STO_OUT(sto,h))


;

*** Household PV generation usage: Directly consumed, curtailed,stored or sold
pv_generation(h)..



*      + CU(res,h)
*      + sum( sto , STO_IN(sto,h))
         (avail_solar(h) * N_PV)
         =G=
         G_PV(h) + E_sell(h)

;

*** Restrict PV capacity
pv_install_max..

           pv_cap_max - N_PV =G= 0
;


KKTN..

        c_i_pv - sum( h, mu(h)*avail_solar(h)) + gamma =G= 0

;

KKTEB(h)..

         price_buy(h) - lambda(h) =G= 0

;

KKTES(h)..

           -price_market(h)   + mu(h) =G=  0

;

KKTG(h)..

      - lambda(h) + mu(h) =G= 0


;



***************************** Initialize model *********************************
Model prosumodmcp /
KKTN.N_PV
KKTG.G_PV
KKTEB.E_buy
KKTES.E_sell
hh_energy_balance.lambda
pv_generation.mu
pv_install_max.gamma

$ontext
KKTN.N_PV
KKTG.G_PV
KKTEB.E_buy
KKTES.E_sell
hh_energy_balance.lambda1
pv_generation.lambda2
pv_install_max.mu
$offtext
/


options
optcr = 0.00
reslim = 10000000
lp = cplex
mcp = path
nlp = conopt
dispwidth = 15
limrow = 0
limcol = 0
solprint = off
sysout = off
optcr = 1e-3
optca = 10
;

$onecho > cplex.opt
lpmethod 4
threads 4
epgap 1e-3
epagap 10
parallelmode -1
$offecho

solve   prosumodmcp using mcp;

lev_Z      =     sum( h , E_buy.l(h)* price_buy(h) )
              -  sum( h,  E_sell.l(h)* price_market(h) )
              +   c_i_pv  * N_PV.l  ;

lev_EB    =  sum( h , E_buy.l(h));
lev_ES    = sum( h,  E_sell.l(h));
check(h)     =  - avail_solar(h) * N_PV.l
         + G_PV.l(h)
         + E_sell.l(h)

display d , N_PV.l ,  N_PV.m, E_buy.l , E_sell.l , G_PV.l
        price_market, hh_energy_balance.m, check,
         mu.l,  lambda.l , gamma.l, lev_Z, lev_EB, lev_ES, KKTN.m


***************************** Set up reporting *********************************


